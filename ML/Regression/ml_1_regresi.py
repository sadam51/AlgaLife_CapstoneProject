# -*- coding: utf-8 -*-
"""ML_1_Regresi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NUv_-4eFYkFiS5XQrtkC5T_wZtLJXqH_

## Regression to predict profit
"""

!pip install tensorflowjs

import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
import pandas as pd

# Set a seed for reproducibility
np.random.seed(42)

# Generate synthetic microalgae business dataset
capital = np.abs(np.round(np.random.uniform(50000, 300000, 200)))
duration = np.abs(np.round(np.random.uniform(1, 12, 200)))
profit = np.abs(np.round(0.5 * capital + 2 * duration + np.random.normal(500, 1000, 200)))

# Create a DataFrame for the synthetic dataset
data = pd.DataFrame({'Capital (Rp)': capital, 'Duration (Month)': duration, 'Profit (Rp)': profit})

data

# Normalize the features
scaler = StandardScaler()
data[['Capital (Rp)', 'Duration (Month)']] = scaler.fit_transform(data[['Capital (Rp)', 'Duration (Month)']])
data['Profit (Rp)'] = (data['Profit (Rp)'] - np.mean(data['Profit (Rp)'])) / np.std(data['Profit (Rp)'])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    data[['Capital (Rp)', 'Duration (Month)']], data['Profit (Rp)'], test_size=0.2, random_state=42
)

# Build a more complex neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(units=32, activation='relu', input_shape=[2]),
    tf.keras.layers.Dropout(0.2),  # Adding dropout for regularization
    tf.keras.layers.Dense(units=16, activation='relu'),
    tf.keras.layers.Dense(units=1)  # No activation for regression task
])

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])

# Train the model with early stopping to prevent overfitting
early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test), callbacks=[early_stopping], verbose=1)

user_capital = float(input("How much capital do you have (in Rupiah)? "))
user_duration_months = float(input("How long do you want to get profit (in months)? "))

# Create input array without normalizing the duration
user_input = np.array([[user_capital, user_duration_months]])

# Make predictions without normalizing the duration
predicted_profit = model.predict(user_input)

# Display the prediction
print(f"\nEstimated Profit: Rp{predicted_profit[0][0]}")

"""#Line for figure out model accuracy"""

import matplotlib.pyplot as plt

# Make predictions on the test set
y_pred_normalized = model.predict(X_test)
y_pred_denormalized = y_pred_normalized * np.std(data['Profit (Rp)']) + np.mean(data['Profit (Rp)'])

# Denormalize true values
y_test_denormalized = y_test * np.std(data['Profit (Rp)']) + np.mean(data['Profit (Rp)'])

# Visualize the results
plt.scatter(y_test_denormalized, y_pred_denormalized)
plt.plot([min(y_test_denormalized), max(y_test_denormalized)], [min(y_test_denormalized), max(y_test_denormalized)],
         color='red', linestyle='--', linewidth=2)  # Diagonal line for reference
plt.xlabel('True Profit')
plt.ylabel('Predicted Profit')
plt.title('Actual vs. Predicted Profit')
plt.show()

import tensorflow as tf
print(tf.__version__)

import time
saved_model_path = "./{}.h5".format(int(time.time()))

model.save(saved_model_path)

!tensorflowjs_converter --input_format=keras {saved_model_path} ./